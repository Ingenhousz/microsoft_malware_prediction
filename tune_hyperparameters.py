# %% import libraries

import scipy.stats as st
from lightgbm import LGBMClassifier
from sklearn.model_selection import RandomizedSearchCV

from util import *

# %% main function
debug = False
with timer("read in files"):
    if debug:
        train, test = read_files(debug)
    else:
        train, test = read_pickle()
    train, test = drop_useless(train, test)

with timer('convert data to sparse matrix'):
    y_train, train_ids, test_ids, train, test = transfer_sparse(train, test)

with timer('target encoding'):
    for col in train.columns:
        train[col + 't'], test[col + 't'] = target_encode(train[col], test[col], y_train)

with timer('one hot encoding'):
    train, test, m = one_hot(train, test)

# train_pred, train_res = vstack(train), y_train
train = vstack([train[train_ids[i * m:(i + 1) * m]] for i in range(train_ids.shape[0] // m + 1)])
train_pred = csr_matrix(train, dtype='float32')
train_res = y_train

# del train, test
gc.collect()


print('train shape: ' + str(train_pred.shape))

# %% tune parameters
gbm_param_grid = {
    'boosting_type': ['gbdt'],
    # 'max_bin': st.randint(25, 300),
    'learning_rate': [0.02],
    'subsample': st.beta(10, 1),
    'subsample_freq': [1],
    'colsample_bytree': st.beta(10, 1),
    'max_depth': st.randint(0, 8),
    'num_leaves': st.randint(1, 2**12),
    'reg_lambda': st.randint(0, 100),
    'reg_alpha': st.randint(0, 100),
    'n_estimators': st.randint(50, 15000),
    'min_split_gain': st.uniform(0, 1),
    'min_child_weight': st.randint(0, 100)}

gbm = LGBMClassifier(objective='binary', n_jobs=-1, device='cpu', seed=777, verbose=-1)

randomized_AUC = RandomizedSearchCV(
    n_jobs=-1,
    estimator=gbm,
    param_distributions=gbm_param_grid,
    n_iter=25,
    scoring='roc_auc',
    cv=4,
    verbose=4,
    random_state=777)

randomized_AUC.fit(train_pred, train_res)

print('Best parameters: ', randomized_AUC.best_params_)
print('Best score: ', randomized_AUC.best_score_)

with open('log.txt', 'a+') as f:
    f.write('Best parameters: ' + str(randomized_AUC.best_params_) + '\n')
    f.write('Best score: ' + str(randomized_AUC.best_score_) + '\n')

"""
Best parameters:  {'bagging_fraction': 0.9307847372499289,
                    'boosting_type': 'gbdt',
                    'colsample_bytree': 0.7368190609087996,
                    'learning_rate': 0.40726988984319074,
                    'max_bin': 255,
                    'max_depth': 6,
                    'min_child_weight': 107.18204736369891,
                    'min_split_gain': 0.8825124051160678,
                    'n_estimators': 10867,
                    'num_leaves': 3616,
                    'reg_alpha': 9.888761485727555,
                    'reg_lambda': 6.26473206229759,
                    'subsample': 0.8896503901659452}
Best score:  0.7642238543314295
"""
