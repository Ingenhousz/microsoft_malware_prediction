# TODO do stacking!!
# TODO use gpu
#  pip install lightgbm --install-option=--nomp
from util import *


# %% read in data
def main(debug=True):

    with timer("read in files"):
        if debug:
            train, test = read_files(debug)
        else:
            train, test = read_pickle()
        print(train.shape)

    with timer("initial feature engineering"):
        train, test = initial_engineering(train, test)
        print(train.shape)

        train, test = drop_useless(train, test)
        print(train.shape)

    with timer('convert data to sparse matrix'):  # improve to 0.661
        y_train, train_ids, test_ids, train, test = transfer_sparse(train, test)
        print(train.shape)

    with timer('target encoding'):
        for col in train.columns:
            train[col+'t'], test[col+'t'] = target_encode(train[col], test[col], y_train)
        print(train.shape)

    with timer('one hot encoding'):
        train, test, m = one_hot(train, test)
        print(train.shape)

    with timer('build model'):
        xgb_test_result, score = k_fold_xgb(train, test, y_train, train_ids, test_ids, m, debug)

    with timer('generate submission files'):
        print('xgb:', score)
        if not debug:
            save_submission(xgb_test_result, score, 'xgb')

    """
    with timer('delete not important features'):
        useful_features = []
        for i in range(train.shape[1]):
            if i not in zero_features:
                useful_features.append(i)
    
        train = train.tocsc()[:, useful_features].tocsr()
        test = test.tocsc()[:, useful_features].tocsr()
        gc.collect()
        print(train.shape)
    
    with timer('rebuild LGBM model'):
        lgb_test_result, score, zero_features = k_fold_lgbm(train, test, y_train, train_ids, test_ids, m, debug)
    
    with timer('generate submission files'):
        if debug:
            print('final score: ', score)
        else:
            print('final score: ', score)
            save_submission(lgb_test_result, score)
    """

    return


if __name__ == '__main__':
    main(debug=False)
